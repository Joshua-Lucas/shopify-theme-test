{% comment %}
	This Script with handle the UI logic for a user click on the qucikview button. When the user clicks we will display a modal to the page with the product detail in it.
{% endcomment %}

<script>

const quickviewButtons = document.querySelectorAll('#quickview')

quickviewButtons.forEach( (button) => {

	{% comment %} The buttons are passed the product titles as their ids, storing the product title to use to get product info and populate the modal template. {% endcomment %}
	let productTitle = button.getAttribute('product-title')
	
	button.addEventListener('click', async function(event){
	{% comment %}
		We will use the Section Rendering API to grab the section HTML. We will get the section HTML by using browser Fetch API to hit the API route.
	{% endcomment %}
	let response = await fetch('/?sections=modal');

	{% comment %}
		The section object retruned from the Section Rendering API, will have our section that we request  as the object key and the HTML of that section as the value.

		We store our this section object into a variable
	{% endcomment %}
	let sectionObject = await response.json();


	{% comment %}Next, we will assign the HTML from the sectionObject into a varaible that we can append our modal section to the DOM. {% endcomment %}
	var modalHtml = sectionObject.modal;
	
	{% comment %} Next we use the addProductDetails to populate the modal section with product data. The addProductFunction returns a promise that when fulfilled we insert the HTML string into the DOM {% endcomment %}
	addProductDetails(modalHtml, productTitle)
	.then( res => {
		document.body.insertAdjacentHTML("beforeend", res) 
		document.body.style="position: fixed;"
	});

	})
})

{% comment %} 
	This function uses the Product API to get the products details and then replace that place holders in the modal section with the procuct data.

	Accepts:
	- html: [string] The section html you want populated with the product data. REQUIRED
	- productHandle: [string] The handle of the product, which is used to retrieve the product data from the Product API. REQUIRED

	Returns: [string] a new string of HTML with the popluated product data. 
{% endcomment %}
async function addProductDetails(sectionHtml, productHandle){
	{% comment %} Get Product data from Product API {% endcomment %}
	var productRes = await fetch(`/products/${productHandle}.json`)

	
	{% comment %} destructure the response object to pull out the product object. {% endcomment %}
	var {product} = await productRes.json()


	{% comment %} A hacky way to get the currency symbol from stores specified currency setting in shopify. {% endcomment %}
	let money = '{{ 0 | money}}' 
	let currencySymbol = money.charAt(0)

	{% comment %} Creates an empty variable to store the form html variant options. {% endcomment %}
	let variantHtml = '';


	{% comment %} Creates and Stores HTML for each Product Variant Avaiable. {% endcomment %}
	if(product.variants.length > 1){
		product.variants.forEach( (prod, index)=> {
			variantHtml = variantHtml + `<div><input class="radio_button" type="radio" name="product" id="${product.title}-${prod.id}" value="${prod.id}" ${index == 0 ? "checked" : null}><label class="modal_radio" for="${product.title}-${prod.id}">${prod.title} for ${currencySymbol}${prod.price}</label></div>`
		})
		
	} else {
		variantHtml = `<div><input class="radio_button" type="radio" name="product" id="${product.title}-${product.variants[0].id}" value="${product.variants[0].id}" checked><label class="modal_radio" for="${product.title}-${product.variants[0].id}">${currencySymbol}${product.variants[0].price}</label></div>`
	}


	{% comment %} Create a new variable that replaces all the palceholders with the data from the product object. {% endcomment %}
	let propulatedHtml =  await sectionHtml.replaceAll('$[product_title]', product.title)
						.replaceAll('$[img_src]', product.image.src)
						.replaceAll('$[product_variant]', variantHtml )
						.replaceAll('$[product_description]', product.body_html)
						.replaceAll('$[product_id]',  product.variants[0].id)

	{% comment %} Retruns the newly populated HTML as a string. {% endcomment %}
	return propulatedHtml;
}
</script>